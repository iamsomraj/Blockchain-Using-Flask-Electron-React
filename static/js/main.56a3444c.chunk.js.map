{"version":3,"sources":["Components/WalletGenerator.js","Components/ViewTransaction.js","Components/MakeTransaction.js","App.js","Components/Login.js","index.js"],"names":["WalletGenerator","props","className","warning","copy","error","onClick","initial","click","readOnly","rows","value","public","private","ViewTransaction","state","isPortNotFilled","serverPort","transactions","isConnectionFailed","serverPortHandler","event","preventDefault","target","slice","setState","serverPortSubmitHandler","nodeUrl","self","axios","get","then","response","data","chain","catch","console","log","render","Fragment","Modal","closeIcon","onClose","close","stage","open","Header","Content","Description","type","onChange","map","ele","index","blocknumber","block_number","timestamp","Date","toLocaleString","key","el","ind","sender_public_key","recipient_public_key","amount","React","Component","MakeTransaction","sender_private_key","isSuccess","isFormFail","errorText","recipientPublicKeyUpdateHandler","amountUpdateHandler","portUpdateHandler","makeTransactionHandler","bodyserverFormData","FormData","set","serverFormData","signature","clientPortAddress","clientPort","post","headers","name","placeholder","required","App","port","publickey","privatekey","isKeySet","prestage","isFailed","isCopy","restoreHandler","headerHandler","tabName","getKeyHandler","a","generateWalletUrl","navigator","clipboard","writeText","href","initialise","getFullYear","Login","isLoginNotDone","instance","initialiseHandler","instanceHandler","instanceSubmitHandler","ReactDOM","document","getElementById"],"mappings":"2QAkIeA,EAhIS,SAAAC,GACtB,OACE,6BACE,wBAAIC,UAAU,iCACZ,uBAAGA,UAAU,wBADf,mBAGE,yBAAKA,UAAU,cAAf,wDAIF,6BACA,6BACA,6BACA,6BACA,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,cACb,0BAAMA,UAAU,WACbD,EAAME,QACL,6BACE,yBAAKD,UAAU,mBACb,yBAAKA,UAAU,SACb,6BACA,yBAAKA,UAAU,sBACb,yBAAKA,UAAU,UAAf,sBACA,wBAAIA,UAAU,QACXD,EAAMG,KACL,sEAEA,GAEF,0GAIA,6FAMJ,+BAGJ,yBAAKF,UAAU,mBACb,yBAAKA,UAAU,sBACb,yBAAKA,UAAU,UAAf,cACA,wBAAIA,UAAU,QACZ,oEACA,2EACA,+FAMJ,+BAIJ,8BAGDD,EAAMI,MACL,6BACE,yBAAKH,UAAU,iBACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,UACb,mDAEF,wBAAIA,UAAU,QACZ,oEACA,8DACA,gFAGJ,yBAAKA,UAAU,gBACb,gCACE,yBACEA,UAAU,oCACVI,QAASL,EAAMM,SAEf,yBAAKL,UAAU,kBAAf,UACA,yBAAKA,UAAU,mBACb,uBAAGA,UAAU,mBAMvB,8BAGF,8BAEF,yBAAKA,UAAU,SACb,gCACE,yBACEA,UAAU,iCACVI,QAASL,EAAMO,OAEf,4BACE,yBAAKN,UAAU,kBACb,uBAAGA,UAAU,cAEf,yBAAKA,UAAU,mBAAf,qBAKR,yBAAKA,UAAU,SACb,+BACE,2CAEF,8BAAUO,UAAQ,EAACC,KAAK,IAAIC,MAAOV,EAAMW,UAE3C,yBAAKV,UAAU,SACb,+BACE,4CAEF,8BAAUO,UAAQ,EAACC,KAAK,IAAIC,MAAOV,EAAMY,gB,2CCmGxCC,E,2MAvNbC,MAAQ,CACNC,iBAAiB,EACjBC,WAAY,GACZC,aAAc,KACdC,oBAAoB,G,EAGtBC,kBAAoB,SAAAC,GAClBA,EAAMC,kBAEHD,EAAME,OAAOZ,MAAMa,MAAM,EAAG,GAAK,IACjCH,EAAME,OAAOZ,MAAMa,MAAM,EAAG,GAAK,IAElC,EAAKC,SAAS,CACZR,WAAYI,EAAME,OAAOZ,MAAMa,MAAM,EAAG,M,EAK9CE,wBAA0B,WACxB,IAAK,EAAKX,MAAME,WAAa,IAAM,EAAKF,MAAME,WAAa,GAAI,CAC7D,IAAIU,EAAU,uBACdA,GAAW,EAAKZ,MAAME,WACtB,IAAIW,EAAI,eACRC,IACGC,IADH,UACUH,EADV,WAEGI,MAAK,SAASC,GAEbJ,EAAKH,SAAS,CACZR,WAAYW,EAAKb,MAAME,WACvBD,iBAAiB,EACjBE,aAAcc,EAASC,KAAKC,MAAMV,MAAM,GACxCL,oBAAoB,OAGvBgB,OAAM,SAAS9B,GACduB,EAAKH,SAAS,CACZT,iBAAiB,EACjBC,WAAY,GACZC,aAAc,KACdC,oBAAoB,IAEtBiB,QAAQC,IAAIhC,Q,EAKpBiC,OAAS,WACP,OACE,8BACkC,IAA/B,EAAKvB,MAAMC,gBACV,kBAAC,IAAMuB,SAAP,KACE,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,kBAACC,EAAA,EAAD,CACEC,WAAS,EACTC,QAAS,kBAAM,EAAKzC,MAAM0C,MAAM,EAAK1C,MAAM2C,QAC3CC,KAAM,EAAK9B,MAAMC,iBAEjB,kBAACwB,EAAA,EAAMM,OAAP,KACE,iDAEF,kBAACN,EAAA,EAAMO,QAAP,KACE,kBAACP,EAAA,EAAMQ,YAAP,KACE,kBAACF,EAAA,EAAD,KACE,kDAEF,gGAIC,EAAK/B,MAAMI,mBACV,6BACE,yBAAKjB,UAAU,iBACb,yBAAKA,UAAU,oBACb,6BAEA,yBAAKA,UAAU,UACb,mDAEF,wBAAIA,UAAU,QACZ,oEACA,gEAGJ,+BAIJ,8BAEF,yBAAKA,UAAU,WACb,yBAAKA,UAAU,SACb,2BACE+C,KAAK,SACLC,SAAU,EAAK9B,kBACfT,MAAO,EAAKI,MAAME,WAAWO,MAAM,EAAG,MAG1C,yBAAKtB,UAAU,UACf,yBACEA,UAAU,0BACVI,QAAS,EAAKoB,yBAEd,yBAAKxB,UAAU,mBAAf,UACA,yBAAKA,UAAU,kBACb,uBAAGA,UAAU,4BAS3B,6BACE,wBAAIA,UAAU,iCACZ,uBAAGA,UAAU,yCADf,mBAGE,yBAAKA,UAAU,cAAf,4CAIF,6BACA,yBAAKA,UAAU,gBACb,gCACE,yBACEA,UAAU,gCACVI,QAAS,EAAKoB,yBAEd,yBAAKxB,UAAU,kBAAf,UACA,yBAAKA,UAAU,mBACb,uBAAGA,UAAU,kBAKrB,6BACA,6BACA,6BAEA,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,cACb,2BAAOA,UAAU,sEACf,+BACE,4BACE,iDACA,oDACA,sCACA,yCACA,6CAGJ,+BAC+B,OAA5B,EAAKa,MAAMG,aACV,EAAKH,MAAMG,aAAaiC,KAAI,SAACC,EAAKC,GAChC,IAAIC,EAAcF,EAAIG,aAElBC,EADK,IAAIC,KAAqB,IAAhBL,EAAII,WACHE,iBAEnB,OACE,kBAAC,IAAMnB,SAAP,CAAgBoB,IAAKN,GAClBD,EAAIlC,aAAaiC,KAAI,SAACS,EAAIC,GACzB,OACE,wBAAIF,IAAKE,GACP,4BAAKD,EAAGE,mBACR,4BAAKF,EAAGG,sBACR,4BAAKH,EAAGI,QACR,4BAAKR,GACL,4BAAKF,WAQjB,kCAQd,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,+B,6BAlNsBW,IAAMC,WCmQrBC,E,2MApQbpD,MAAQ,CACN+C,kBAAmB,EAAK7D,MAAMW,QAAU,GACxCwD,mBAAoB,EAAKnE,MAAMY,SAAW,GAC1CkD,qBAAsB,GACtBC,OAAQ,GACRK,WAAW,EACXpD,WAAY,GACZqD,YAAY,EACZC,UAAW,W,EAEbC,gCAAkC,SAAAnD,GAChCA,EAAMC,iBACN,EAAKG,SAAS,CACZsC,qBAAsB1C,EAAME,OAAOZ,S,EAGvC8D,oBAAsB,SAAApD,GACpBA,EAAMC,iBACN,EAAKG,SAAS,CACZuC,OAAQ3C,EAAME,OAAOZ,S,EAGzB+D,kBAAoB,SAAArD,GAClBA,EAAMC,iBACN,EAAKG,SAAS,CACZR,WAAYI,EAAME,OAAOZ,S,EAI7BgE,uBAAyB,SAAAtD,GAEvB,GADAA,EAAMC,iBAEkB,KAAtB,EAAKP,MAAMiD,QACuB,KAAlC,EAAKjD,MAAMqD,oBACsB,KAAjC,EAAKrD,MAAM+C,mBACyB,KAApC,EAAK/C,MAAMgD,sBACe,KAA1B,EAAKhD,MAAME,aACV,EAAKF,MAAME,WAAa,IACxB,EAAKF,MAAME,WAAa,GACzB,CACA,IAAI2D,EAAqB,IAAIC,SAC7BD,EAAmBE,IAAI,oBAAqB,EAAK/D,MAAM+C,mBACvDc,EAAmBE,IACjB,qBACA,EAAK/D,MAAMqD,oBAEb,IAAIxC,EAAI,eACRgD,EAAmBE,IACjB,uBACA,EAAK/D,MAAMgD,sBAEba,EAAmBE,IAAI,SAAU,EAAK/D,MAAMiD,QAC5C,IAAIe,EAAiB,IAAIF,SACzBE,EAAeD,IACb,iCACA,EAAK/D,MAAM+C,mBAGbiB,EAAeD,IACb,oCACA,EAAK/D,MAAMgD,sBAEbgB,EAAeD,IAAI,sBAAuB,EAAK/D,MAAMiD,QACrD,IAAIgB,EAAY,GACZC,EAAoB,uBACxBA,GAAqB,EAAKhF,MAAMiF,WAChCrD,IACGsD,KADH,UACWF,EADX,yBACqDL,EAAoB,CACrEQ,QAAS,CACP,8BAA+BH,KAGlClD,MAAK,SAASC,GACbI,QAAQC,IAAI,SAAUL,EAASC,MAC/B+C,EAAYhD,EAASC,KAAK+C,UAC1B,IAAIrD,EAAU,uBACdA,GAAWC,EAAKb,MAAME,WACtB8D,EAAeD,IAAI,wBAAyBE,GAC5CD,EAAeD,IAAI,WAAYnD,GAC/BE,IACGsD,KADH,UACWxD,EADX,qBACuCoD,EAAgB,CACnDK,QAAS,CACP,8BAA+BzD,KAGlCI,MAAK,SAAAC,GACJI,QAAQC,IAAI,SAAUL,EAASC,MAC/BL,EAAKH,SAAS,CACZsC,qBAAsB,GACtBC,OAAQ,GACR/C,WAAY,GACZoD,WAAW,EACXC,YAAY,OAGfnC,OAAM,SAAA9B,GACL+B,QAAQC,IAAIhC,GACZ+B,QAAQC,IAAIT,EAAKb,OAEjBa,EAAKH,SAAS,CACZsC,qBAAsB,GACtBC,OAAQ,GACR/C,WAAY,GACZsD,UAAW,iCACXF,WAAW,EACXC,YAAY,UAInBnC,OAAM,SAAS9B,GACd+B,QAAQC,IAAIhC,GACZ+B,QAAQC,IAAIT,EAAKb,OACjBa,EAAKH,SAAS,CACZsC,qBAAsB,GACtBC,OAAQ,GACR/C,WAAY,GACZoD,WAAW,EACXC,YAAY,EACZC,UAAW,0C,EAgBrBjC,OAAS,WACP,OACE,6BACE,6BACE,wBAAIpC,UAAU,iCACZ,uBAAGA,UAAU,sCADf,mBAGE,yBAAKA,UAAU,cAAf,uDAKJ,6BACA,6BACA,6BACA,6BACA,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,cACb,0BAAMA,UAAU,WACb,EAAKa,MAAMsD,UACV,yBAAKnE,UAAU,mBACb,yBAAKA,UAAU,SACb,6BACA,yBAAKA,UAAU,sBACb,yBAAKA,UAAU,UAAf,yBACA,4BACA,yEACA,kFAEF,gCAGwB,IAA1B,EAAKa,MAAMuD,WACb,6BACE,yBAAKpE,UAAU,iBACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,UACb,4BAAK,EAAKa,MAAMwD,YAElB,wBAAIrE,UAAU,QACZ,oEACA,8DACA,0DAGJ,+BAIJ,8BAEF,yBAAKA,UAAU,SACb,oDACA,2BACEO,UAAQ,EACRwC,KAAK,OACLoC,KAAK,oBACLC,YAAY,oBACZ3E,MAAO,EAAKI,MAAM+C,kBAClByB,UAAQ,KAGZ,yBAAKrF,UAAU,SACb,qDACA,2BACEO,UAAQ,EACRwC,KAAK,OACLoC,KAAK,qBACLC,YAAY,qBACZ3E,MAAO,EAAKI,MAAMqD,mBAClBmB,UAAQ,KAGZ,yBAAKrF,UAAU,SACb,uDACA,2BACEgD,SAAU,EAAKsB,gCACfvB,KAAK,OACLoC,KAAK,uBACLC,YAAY,uBACZ3E,MAAO,EAAKI,MAAMgD,qBAClBwB,UAAQ,KAGZ,yBAAKrF,UAAU,SACb,yCACA,2BACEgD,SAAU,EAAKuB,oBACfxB,KAAK,OACLoC,KAAK,SACLC,YAAY,SACZ3E,MAAO,EAAKI,MAAMiD,OAClBuB,UAAQ,KAGZ,yBAAKrF,UAAU,SACb,8CACA,2BACEgD,SAAU,EAAKwB,kBACfzB,KAAK,SACLoC,KAAK,cACLC,YAAY,sBACZ3E,MAAO,EAAKI,MAAME,WAAWO,MAAM,EAAG,GACtC+D,UAAQ,KAGZ,yBAAKrF,UAAU,SACb,gCACE,yBACEA,UAAU,oCACVI,QAAS,EAAKqE,wBAEd,yBAAKzE,UAAU,kBACb,uBAAGA,UAAU,0BAEf,yBAAKA,UAAU,mBAAf,oB,6BA1PUgE,aC8KfsB,E,2MAzKbzE,MAAQ,CACN0E,KAAM,EAAKxF,MAAMwF,MAAQ,IACzBC,UAAW,GACXC,WAAY,GACZC,UAAU,EACVhD,MAAO,EACPiD,SAAU,KACVC,UAAU,EACVC,QAAQ,G,EAGVC,eAAiB,SAAApD,GACf,EAAKnB,SAAS,CACZgE,KAAM,EAAK1E,MAAM0E,KACjBC,UAAW,EAAK3E,MAAM2E,UACtBC,WAAY,EAAK5E,MAAM4E,WACvBC,SAAU,EAAK7E,MAAM6E,SACrBhD,MAAOA,EACPkD,SAAU,EAAK/E,MAAM+E,Y,EAIzBG,cAAgB,SAAC5E,EAAO6E,GACtB7E,EAAMC,iBACU,WAAZ4E,EACF,EAAKzE,SAAS,CAAEmB,MAAO,IACF,SAAZsD,EACT,EAAKzE,SAAS,CACZmB,MAAO,IAGT,EAAKnB,SAAS,CACZoE,SAAU,EAAK9E,MAAM6B,MACrBA,MAAO,K,EAKbuD,c,uCAAgB,WAAM9E,GAAN,iBAAA+E,EAAA,yDACVC,EAAoB,uBACxBA,GAAqB,EAAKtF,MAAM0E,KAEhCpE,EAAMC,iBACD,EAAKP,MAAM6E,SALF,wBAMR5D,EAAW,KANH,kBAQOH,IAAMC,IAAN,UAAauE,EAAb,eAA6C,CAC5DjB,QAAS,CACP,8BAA+BiB,KAVzB,OAQVrE,EARU,OAaV,EAAKP,SAAS,CACZiE,UAAW1D,EAASC,KAAT,WACX0D,WAAY3D,EAASC,KAAT,YACZ2D,UAAU,EACVE,UAAU,IAEZ,IACEQ,UAAUC,UAAUC,UAAU,EAAKzF,MAAM2E,WACzCtD,QAAQC,IAAI,sBAEZ,EAAKZ,SAAS,CACZsE,QAAQ,IAEV,MAAO1F,GACP+B,QAAQC,IAAI,uBAEZ,EAAKZ,SAAS,CACZsE,QAAQ,IA9BF,kDAkCV3D,QAAQC,IAAR,MACA,EAAKZ,SAAS,CACZmE,UAAU,EACVE,UAAU,IArCF,gCAyCZ,EAAKrE,SAAS,CACZiE,UAAW,EAAK3E,MAAM2E,UACtBE,UAAU,EACVE,UAAU,IAEZ,EAAKrE,SAAS,CACZkE,WAAY,EAAK5E,MAAM4E,WACvBC,UAAU,EACVE,UAAU,IAjDA,0D,wDAsDhBxD,OAAS,kBACP,yBAAKpC,UAAU,OACb,yBAAKA,UAAU,uCACb,uBACEuG,KAAK,IACLvG,WAAiC,IAArB,EAAKa,MAAM6B,MAAc,UAAY,KAAtC,QACXtC,QAAS,SAAAe,GAAK,OAAI,EAAK4E,cAAc5E,EAAO,YAH9C,qBAOA,uBACEoF,KAAK,IACLvG,WAAiC,IAArB,EAAKa,MAAM6B,MAAc,UAAY,KAAtC,QACXtC,QAAS,SAAAe,GAAK,OAAI,EAAK4E,cAAc5E,EAAO,UAH9C,oBAOA,uBACEoF,KAAK,IACLvG,WAAiC,IAArB,EAAKa,MAAM6B,MAAc,UAAY,KAAtC,QACXtC,QAAS,SAAAe,GAAK,OAAI,EAAK4E,cAAc5E,EAAO,UAH9C,qBAQF,6BACA,6BACA,6BACA,6BACsB,IAArB,EAAKN,MAAM6B,MACV,6BACE,kBAAC,EAAD,CACEpC,MAAO,EAAK2F,cACZvF,OAAQ,EAAKG,MAAM2E,UACnB7E,QAAS,EAAKE,MAAM4E,WACpBxF,QAAS,EAAKY,MAAM6E,SACpBvF,MAAO,EAAKU,MAAM+E,SAClBvF,QAAS,EAAKN,MAAMyG,WACpBtG,KAAM,EAAKW,MAAMgF,UAGE,IAArB,EAAKhF,MAAM6B,MACb,kBAAC,EAAD,CACEhC,OAAQ,EAAKG,MAAM2E,UACnB7E,QAAS,EAAKE,MAAM4E,WACpBT,WAAY,EAAKnE,MAAM0E,OAEF,IAArB,EAAK1E,MAAM6B,MACb,kBAAC,EAAD,CACEA,MAAO,EAAK7B,MAAM8E,SAClBlD,MAAO,EAAKqD,iBAGd,8BAEF,6BACA,6BACA,yBAAK9F,UAAU,iDACb,yBAAKA,UAAU,gBAAf,aACY,uBAAGA,UAAU,eACvB,mCAFF,KAGI,mCACF,uBACEA,UAAU,WACVuG,KAAK,gCACLlF,OAAO,SAHT,oBAOA,mCAXF,SAYU,IAAIkC,MAAOkD,kB,6BAnKXzC,aCgFH0C,E,2MAhFb7F,MAAQ,CACN8F,gBAAgB,EAChBC,SAAU,I,EAGZC,kBAAoB,SAAA1F,GAClBA,EAAMC,iBACN,EAAKG,SAAS,CACZoF,gBAAgB,EAChBC,SAAU,M,EAIdE,gBAAkB,SAAA3F,GAChBA,EAAMC,kBAEHD,EAAME,OAAOZ,MAAMa,MAAM,EAAG,GAAK,IACjCH,EAAME,OAAOZ,MAAMa,MAAM,EAAG,GAAK,IAElC,EAAKC,SAAS,CACZqF,SAAUzF,EAAME,OAAOZ,S,EAK7BsG,sBAAwB,YACjB,EAAKlG,MAAM+F,SAAW,IAAM,EAAK/F,MAAM+F,SAAW,IACrD,EAAKrF,SAAS,CACZoF,gBAAgB,K,EAKtBvE,OAAS,WACP,OACE,8BACiC,IAA9B,EAAKvB,MAAM8F,eACV,kBAACrE,EAAA,EAAD,CAAOK,KAAM,EAAK9B,MAAM8F,gBACtB,kBAACrE,EAAA,EAAMM,OAAP,KACE,iDAEF,kBAACN,EAAA,EAAMO,QAAP,KACE,kBAACP,EAAA,EAAMQ,YAAP,KACE,kBAACF,EAAA,EAAD,KACE,gDAEF,8GAIA,yBAAK5C,UAAU,WACb,yBAAKA,UAAU,SACb,2BACE+C,KAAK,SACLC,SAAU,EAAK8D,gBACfrG,MAAO,EAAKI,MAAM+F,SAAStF,MAAM,EAAG,MAGxC,yBAAKtB,UAAU,UACf,yBACEA,UAAU,0BACVI,QAAS,EAAK2G,uBAEd,yBAAK/G,UAAU,mBAAf,UACA,yBAAKA,UAAU,kBACb,uBAAGA,UAAU,2BAQzB,kBAAC,EAAD,CAAKuF,KAAM,EAAK1E,MAAM+F,SAAUJ,WAAY,EAAKK,sB,6BA1EvC7C,aCDpBgD,IAAS5E,OAAO,kBAAC,EAAD,MAAW6E,SAASC,eAAe,W","file":"static/js/main.56a3444c.chunk.js","sourcesContent":["import React from 'react';\n\nconst WalletGenerator = props => {\n  return (\n    <div>\n      <h2 className=\"ui center aligned icon header\">\n        <i className=\"circular rupee icon\"></i>\n        Wallet Generator\n        <div className=\"sub header\">\n          Press The Button To Generate Your Blockchain Wallet\n        </div>\n      </h2>\n      <br />\n      <br />\n      <br />\n      <br />\n      <div className=\"ui container\">\n        <div className=\"ui segment\">\n          <form className=\"ui form\">\n            {props.warning ? (\n              <div>\n                <div className=\"ui form success\">\n                  <div className=\"field\">\n                    <br />\n                    <div className=\"ui success message\">\n                      <div className=\"header\">Keys are generated</div>\n                      <ul className=\"list\">\n                        {props.copy ? (\n                          <li>Your Public Key is copied to clipboard</li>\n                        ) : (\n                          ''\n                        )}\n                        <li>\n                          Both Public Key and Private Key will help you in your\n                          further transactions\n                        </li>\n                        <li>\n                          Keys play crucial role in generating transaction\n                          signatures\n                        </li>\n                      </ul>\n                    </div>\n                    <br />\n                  </div>\n                </div>\n                <div className=\"ui form warning\">\n                  <div className=\"ui warning message\">\n                    <div className=\"header\">Important!</div>\n                    <ul className=\"list\">\n                      <li>Save your Public Key and Private Key</li>\n                      <li>These keys cannot be recovered once created</li>\n                      <li>\n                        Sharing your private key can lead to potential security\n                        risks\n                      </li>\n                    </ul>\n                  </div>\n                  <br />\n                </div>\n              </div>\n            ) : (\n              <div></div>\n            )}\n\n            {props.error ? (\n              <div>\n                <div className=\"ui form error\">\n                  <div className=\"ui error message\">\n                    <div className=\"header\">\n                      <h2>Connection Failure</h2>\n                    </div>\n                    <ul className=\"list\">\n                      <li>Make sure that the server is running</li>\n                      <li>Always check your port address</li>\n                      <li>Reload Blockchain Client to make a clean start</li>\n                    </ul>\n                  </div>\n                  <div className=\"ui conatiner\">\n                    <center>\n                      <div\n                        className=\"large ui animated negative button\"\n                        onClick={props.initial}\n                      >\n                        <div className=\"hidden content\">Reload</div>\n                        <div className=\"visible content\">\n                          <i className=\"sync icon\"></i>\n                        </div>\n                      </div>\n                    </center>\n                  </div>\n                </div>\n                <br />\n              </div>\n            ) : (\n              <div></div>\n            )}\n            <div className=\"field\">\n              <center>\n                <div\n                  className=\"large ui animated green button\"\n                  onClick={props.click}\n                >\n                  <h3>\n                    <div className=\"hidden content\">\n                      <i className=\"key icon\"></i>\n                    </div>\n                    <div className=\"visible content\">Generate Keys</div>\n                  </h3>\n                </div>\n              </center>\n            </div>\n            <div className=\"field\">\n              <label>\n                <h2>Public Key</h2>\n              </label>\n              <textarea readOnly rows=\"5\" value={props.public}></textarea>\n            </div>\n            <div className=\"field\">\n              <label>\n                <h2>Private Key</h2>\n              </label>\n              <textarea readOnly rows=\"5\" value={props.private}></textarea>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default WalletGenerator;\n","import React from 'react';\nimport { Header, Modal } from 'semantic-ui-react';\nimport axios from 'axios';\n\nclass ViewTransaction extends React.Component {\n  state = {\n    isPortNotFilled: true,\n    serverPort: '',\n    transactions: null,\n    isConnectionFailed: false\n  };\n\n  serverPortHandler = event => {\n    event.preventDefault();\n    if (\n      +event.target.value.slice(0, 1) > 0 &&\n      +event.target.value.slice(0, 1) < 10\n    ) {\n      this.setState({\n        serverPort: event.target.value.slice(0, 1)\n      });\n    }\n  };\n\n  serverPortSubmitHandler = () => {\n    if (+this.state.serverPort > 0 && +this.state.serverPort < 10) {\n      let nodeUrl = 'http://localhost:500';\n      nodeUrl += this.state.serverPort;\n      let self = this;\n      axios\n        .get(`${nodeUrl}/chain`)\n        .then(function(response) {\n          // handle success\n          self.setState({\n            serverPort: self.state.serverPort,\n            isPortNotFilled: false,\n            transactions: response.data.chain.slice(1),\n            isConnectionFailed: false\n          });\n        })\n        .catch(function(error) {\n          self.setState({\n            isPortNotFilled: true,\n            serverPort: '',\n            transactions: null,\n            isConnectionFailed: true\n          });\n          console.log(error);\n        });\n    }\n  };\n\n  render = () => {\n    return (\n      <div>\n        {this.state.isPortNotFilled === true ? (\n          <React.Fragment>\n            <br />\n            <br />\n            <br />\n            <br />\n            <br />\n            <br />\n            <br />\n            <br />\n            <br />\n            <br />\n            <br />\n            <br />\n            <br /> \n            <br />\n            <br />\n            <br />\n            <br />\n            <br />\n            <Modal\n              closeIcon\n              onClose={() => this.props.close(this.props.stage)}\n              open={this.state.isPortNotFilled}\n            >\n              <Modal.Header>\n                <h1>Choose your node</h1>\n              </Modal.Header>\n              <Modal.Content>\n                <Modal.Description>\n                  <Header>\n                    <h2>Select your port:</h2>\n                  </Header>\n                  <p>\n                    The number is your node address so that you can specify the\n                    node.\n                  </p>\n                  {this.state.isConnectionFailed ? (\n                    <div>\n                      <div className=\"ui form error\">\n                        <div className=\"ui error message\">\n                          <br />\n\n                          <div className=\"header\">\n                            <h2>Connection Failure</h2>\n                          </div>\n                          <ul className=\"list\">\n                            <li>Make sure that the server is running</li>\n                            <li>Always check your port address</li>\n                          </ul>\n                        </div>\n                        <br />\n                      </div>\n                    </div>\n                  ) : (\n                    <div></div>\n                  )}\n                  <div className=\"ui form\">\n                    <div className=\"field\">\n                      <input\n                        type=\"number\"\n                        onChange={this.serverPortHandler}\n                        value={this.state.serverPort.slice(0, 1)}\n                      />\n                    </div>\n                    <div className=\"field\"></div>\n                    <div\n                      className=\"ui animated blue button\"\n                      onClick={this.serverPortSubmitHandler}\n                    >\n                      <div className=\"visible content\">Submit</div>\n                      <div className=\"hidden content\">\n                        <i className=\"right arrow icon\"></i>\n                      </div>\n                    </div>\n                  </div>\n                </Modal.Description>\n              </Modal.Content>\n            </Modal>\n          </React.Fragment>\n        ) : (\n          <div>\n            <h2 className=\"ui center aligned icon header\">\n              <i className=\"circular list alternate outline icon\"></i>\n              View Transaction\n              <div className=\"sub header\">\n                What a wonderful time to have you here!\n              </div>\n            </h2>\n            <br />\n            <div className=\"ui conatiner\">\n              <center>\n                <div\n                  className=\"large ui animated blue button\"\n                  onClick={this.serverPortSubmitHandler}\n                >\n                  <div className=\"hidden content\">Reload</div>\n                  <div className=\"visible content\">\n                    <i className=\"sync icon\"></i>\n                  </div>\n                </div>\n              </center>\n            </div>\n            <br />\n            <br />\n            <br />\n\n            <div className=\"ui container\">\n              <div className=\"ui segment\">\n                <table className=\"ui inverted fixed single line five column celled very padded table\">\n                  <thead>\n                    <tr>\n                      <th>Sender Public Key</th>\n                      <th>Recipient Public Key</th>\n                      <th>Amount</th>\n                      <th>Timestamp</th>\n                      <th>Blocknumber</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {this.state.transactions !== null ? (\n                      this.state.transactions.map((ele, index) => {\n                        let blocknumber = ele.block_number;\n                        let ts = new Date(ele.timestamp * 1000);\n                        let timestamp = ts.toLocaleString();\n\n                        return (\n                          <React.Fragment key={index}>\n                            {ele.transactions.map((el, ind) => {\n                              return (\n                                <tr key={ind}>\n                                  <td>{el.sender_public_key}</td>\n                                  <td>{el.recipient_public_key}</td>\n                                  <td>{el.amount}</td>\n                                  <td>{timestamp}</td>\n                                  <td>{blocknumber}</td>\n                                </tr>\n                              );\n                            })}\n                          </React.Fragment>\n                        );\n                      })\n                    ) : (\n                      <tr></tr>\n                    )}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n        )}\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n      </div>\n    );\n  };\n}\n\nexport default ViewTransaction;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nclass MakeTransaction extends Component {\n  state = {\n    sender_public_key: this.props.public || '',\n    sender_private_key: this.props.private || '',\n    recipient_public_key: '',\n    amount: '',\n    isSuccess: false,\n    serverPort: '',\n    isFormFail: false,\n    errorText: 'Failure'\n  };\n  recipientPublicKeyUpdateHandler = event => {\n    event.preventDefault();\n    this.setState({\n      recipient_public_key: event.target.value\n    });\n  };\n  amountUpdateHandler = event => {\n    event.preventDefault();\n    this.setState({\n      amount: event.target.value\n    });\n  };\n  portUpdateHandler = event => {\n    event.preventDefault();\n    this.setState({\n      serverPort: event.target.value\n    });\n  };\n\n  makeTransactionHandler = event => {\n    event.preventDefault();\n    if (\n      this.state.amount !== '' &&\n      this.state.sender_private_key !== '' &&\n      this.state.sender_public_key !== '' &&\n      this.state.recipient_public_key !== '' &&\n      this.state.serverPort !== '' &&\n      +this.state.serverPort > 0 &&\n      +this.state.serverPort < 10\n    ) {\n      let bodyserverFormData = new FormData();\n      bodyserverFormData.set('sender_public_key', this.state.sender_public_key);\n      bodyserverFormData.set(\n        'sender_private_key',\n        this.state.sender_private_key\n      );\n      let self = this;\n      bodyserverFormData.set(\n        'recipient_public_key',\n        this.state.recipient_public_key\n      );\n      bodyserverFormData.set('amount', this.state.amount);\n      let serverFormData = new FormData();\n      serverFormData.set(\n        'confirmation_sender_public_key',\n        this.state.sender_public_key\n      );\n\n      serverFormData.set(\n        'confirmation_recipient_public_key',\n        this.state.recipient_public_key\n      );\n      serverFormData.set('confirmation_amount', this.state.amount);\n      let signature = '';\n      let clientPortAddress = 'http://localhost:808';\n      clientPortAddress += this.props.clientPort;\n      axios\n        .post(`${clientPortAddress}/generate/transaction`, bodyserverFormData, {\n          headers: {\n            'Access-Control-Allow-Origin': clientPortAddress\n          }\n        })\n        .then(function(response) {\n          console.log('Client', response.data);\n          signature = response.data.signature;\n          let nodeUrl = 'http://localhost:500';\n          nodeUrl += self.state.serverPort;\n          serverFormData.set('transaction_signature', signature);\n          serverFormData.set('node_url', nodeUrl);\n          axios\n            .post(`${nodeUrl}/transactions/new`, serverFormData, {\n              headers: {\n                'Access-Control-Allow-Origin': nodeUrl\n              }\n            })\n            .then(response => {\n              console.log('Server', response.data);\n              self.setState({\n                recipient_public_key: '',\n                amount: '',\n                serverPort: '',\n                isSuccess: true,\n                isFormFail: false\n              });\n            })\n            .catch(error => {\n              console.log(error);\n              console.log(self.state);\n\n              self.setState({\n                recipient_public_key: '',\n                amount: '',\n                serverPort: '',\n                errorText: 'Node Server refused to connect',\n                isSuccess: false,\n                isFormFail: true\n              });\n            });\n        })\n        .catch(function(error) {\n          console.log(error);\n          console.log(self.state);\n          self.setState({\n            recipient_public_key: '',\n            amount: '',\n            serverPort: '',\n            isSuccess: false,\n            isFormFail: true,\n            errorText: 'Client Server refused to connect'\n          });\n        });\n    // } else {\n    //   console.log(this.state);\n\n    //   this.setState({\n    //     recipient_public_key: '',\n    //     amount: '',\n    //     serverPort: '',\n    //     isSuccess: false,\n    //     isFormFail: true,\n    //     errorText: 'Fields may be wrong or empty'\n    //   });\n    }\n  }\n  render = () => {\n    return (\n      <div>\n        <div>\n          <h2 className=\"ui center aligned icon header\">\n            <i className=\"circular credit card outline icon\"></i>\n            Make Transaction\n            <div className=\"sub header\">\n              What a Good Day To Mine Some Cryptographic Coins!\n            </div>\n          </h2>\n        </div>\n        <br />\n        <br />\n        <br />\n        <br />\n        <div className=\"ui container\">\n          <div className=\"ui segment\">\n            <form className=\"ui form\">\n              {this.state.isSuccess ? (\n                <div className=\"ui form success\">\n                  <div className=\"field\">\n                    <br />\n                    <div className=\"ui success message\">\n                      <div className=\"header\">Transaction Completed</div>\n                      <p></p>\n                      <p>You're all signed up for some reward now. </p>\n                      <p>Your transaction will be added to the next block. </p>\n                    </div>\n                    <br />\n                  </div>\n                </div>\n              ) : this.state.isFormFail === true ? (\n                <div>\n                  <div className=\"ui form error\">\n                    <div className=\"ui error message\">\n                      <div className=\"header\">\n                        <h2>{this.state.errorText}</h2>\n                      </div>\n                      <ul className=\"list\">\n                        <li>Make sure that the server is running</li>\n                        <li>Always check your port address</li>\n                        <li>Some fields may be wrong</li>\n                      </ul>\n                    </div>\n                    <br />\n                  </div>\n                </div>\n              ) : (\n                <div></div>\n              )}\n              <div className=\"field\">\n                <label>Sender Public Key</label>\n                <input\n                  readOnly\n                  type=\"text\"\n                  name=\"sender-public-key\"\n                  placeholder=\"Sender Public Key\"\n                  value={this.state.sender_public_key}\n                  required\n                />\n              </div>\n              <div className=\"field\">\n                <label>Sender Private Key</label>\n                <input\n                  readOnly\n                  type=\"text\"\n                  name=\"sender-private-key\"\n                  placeholder=\"Sender Private Key\"\n                  value={this.state.sender_private_key}\n                  required\n                />\n              </div>\n              <div className=\"field\">\n                <label>Recipient Public Key</label>\n                <input\n                  onChange={this.recipientPublicKeyUpdateHandler}\n                  type=\"text\"\n                  name=\"recipient-public-key\"\n                  placeholder=\"Recipient Public Key\"\n                  value={this.state.recipient_public_key}\n                  required\n                />\n              </div>\n              <div className=\"field\">\n                <label>Amount</label>\n                <input\n                  onChange={this.amountUpdateHandler}\n                  type=\"text\"\n                  name=\"amount\"\n                  placeholder=\"Amount\"\n                  value={this.state.amount}\n                  required\n                />\n              </div>\n              <div className=\"field\">\n                <label>Server Port</label>\n                <input\n                  onChange={this.portUpdateHandler}\n                  type=\"number\"\n                  name=\"server-port\"\n                  placeholder=\"Server Port Address\"\n                  value={this.state.serverPort.slice(0, 1)}\n                  required\n                />\n              </div>\n              <div className=\"field\">\n                <center>\n                  <div\n                    className=\"large ui animated positive button\"\n                    onClick={this.makeTransactionHandler}\n                  >\n                    <div className=\"hidden content\">\n                      <i className=\"handshake white icon\"></i>\n                    </div>\n                    <div className=\"visible content\">Transfer</div>\n                  </div>\n                </center>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  };\n}\nexport default MakeTransaction;\n","import React, { Component } from 'react';\nimport WalletGenerator from './Components/WalletGenerator';\nimport ViewTransaction from './Components/ViewTransaction';\nimport MakeTransaction from './Components/MakeTransaction';\nimport axios from 'axios';\n\nclass App extends Component {\n  state = {\n    port: this.props.port || '1',\n    publickey: '',\n    privatekey: '',\n    isKeySet: false,\n    stage: 1,\n    prestage: null,\n    isFailed: false,\n    isCopy: false\n  };\n\n  restoreHandler = stage => {\n    this.setState({\n      port: this.state.port,\n      publickey: this.state.publickey,\n      privatekey: this.state.privatekey,\n      isKeySet: this.state.isKeySet,\n      stage: stage,\n      isFailed: this.state.isFailed\n    });\n  };\n\n  headerHandler = (event, tabName) => {\n    event.preventDefault();\n    if (tabName === 'wallet') {\n      this.setState({ stage: 1 });\n    } else if (tabName === 'make') {\n      this.setState({\n        stage: 2\n      });\n    } else {\n      this.setState({\n        prestage: this.state.stage,\n        stage: 3\n      });\n    }\n  };\n\n  getKeyHandler = async event => {\n    let generateWalletUrl = 'http://localhost:808';\n    generateWalletUrl += this.state.port;\n\n    event.preventDefault();\n    if (!this.state.isKeySet) {\n      let response = null;\n      try {\n        response = await axios.get(`${generateWalletUrl}/wallet/new`, {\n          headers: {\n            'Access-Control-Allow-Origin': generateWalletUrl\n          }\n        });\n        this.setState({\n          publickey: response.data['public_key'],\n          privatekey: response.data['private_key'],\n          isKeySet: true,\n          isFailed: false\n        });\n        try {\n          navigator.clipboard.writeText(this.state.publickey);\n          console.log('Clipboard success!');\n\n          this.setState({\n            isCopy: true\n          });\n        } catch (error) {\n          console.log('Key copy is failed!');\n\n          this.setState({\n            isCopy: false\n          });\n        }\n      } catch (error) {\n        console.log(error);\n        this.setState({\n          isKeySet: false,\n          isFailed: true\n        });\n      }\n    } else {\n      this.setState({\n        publickey: this.state.publickey,\n        isKeySet: true,\n        isFailed: false\n      });\n      this.setState({\n        privatekey: this.state.privatekey,\n        isKeySet: true,\n        isFailed: false\n      });\n    }\n  };\n\n  render = () => (\n    <div className=\"App\">\n      <div className=\"ui three item fixed borderless menu\">\n        <a\n          href=\"/\"\n          className={(this.state.stage === 1 ? 'active ' : ' ') + `item `}\n          onClick={event => this.headerHandler(event, 'wallet')}\n        >\n          Wallet Generation\n        </a>\n        <a\n          href=\"/\"\n          className={(this.state.stage === 2 ? 'active ' : ' ') + `item `}\n          onClick={event => this.headerHandler(event, 'make')}\n        >\n          Make Transaction\n        </a>\n        <a\n          href=\"/\"\n          className={(this.state.stage === 3 ? 'active ' : ' ') + `item `}\n          onClick={event => this.headerHandler(event, 'view')}\n        >\n          View Transaction\n        </a>\n      </div>\n      <br />\n      <br />\n      <br />\n      <br />\n      {this.state.stage === 1 ? (\n        <div>\n          <WalletGenerator\n            click={this.getKeyHandler}\n            public={this.state.publickey}\n            private={this.state.privatekey}\n            warning={this.state.isKeySet}\n            error={this.state.isFailed}\n            initial={this.props.initialise}\n            copy={this.state.isCopy}\n          />\n        </div>\n      ) : this.state.stage === 2 ? (\n        <MakeTransaction\n          public={this.state.publickey}\n          private={this.state.privatekey}\n          clientPort={this.state.port}\n        />\n      ) : this.state.stage === 3 ? (\n        <ViewTransaction\n          stage={this.state.prestage}\n          close={this.restoreHandler}\n        />\n      ) : (\n        <div></div>\n      )}\n      <br />\n      <br />\n      <div className=\"ui inverted vertical footer segment form-page\">\n        <div className=\"ui container\">\n          Made with <i className=\"heart icon\"></i>\n          <span> </span>\n          By<span> </span>\n          <a\n            className=\"ui white\"\n            href=\"https://github.com/iamsomraj/\"\n            target=\"blank\"\n          >\n            Somraj Mukherjee\n          </a>\n          <span> </span>\n          &copy; {new Date().getFullYear()}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable jsx-a11y/img-redundant-alt */\r\nimport React, { Component } from 'react';\r\nimport App from '../App';\r\nimport { Header, Modal } from 'semantic-ui-react';\r\n\r\nclass Login extends Component {\r\n  state = {\r\n    isLoginNotDone: true,\r\n    instance: ''\r\n  };\r\n\r\n  initialiseHandler = event => {\r\n    event.preventDefault();\r\n    this.setState({\r\n      isLoginNotDone: true,\r\n      instance: ''\r\n    });\r\n  };\r\n\r\n  instanceHandler = event => {\r\n    event.preventDefault();\r\n    if (\r\n      +event.target.value.slice(0, 1) > 0 &&\r\n      +event.target.value.slice(0, 1) < 10\r\n    ) {\r\n      this.setState({\r\n        instance: event.target.value\r\n      });\r\n    }\r\n  };\r\n\r\n  instanceSubmitHandler = () => {\r\n    if (+this.state.instance > 0 && +this.state.instance < 10) {\r\n      this.setState({\r\n        isLoginNotDone: false\r\n      });\r\n    }\r\n  };\r\n\r\n  render = () => {\r\n    return (\r\n      <div>\r\n        {this.state.isLoginNotDone === true ? (\r\n          <Modal open={this.state.isLoginNotDone}>\r\n            <Modal.Header>\r\n              <h1>Choose your port</h1>\r\n            </Modal.Header>\r\n            <Modal.Content>\r\n              <Modal.Description>\r\n                <Header>\r\n                  <h2>Enter a number:</h2>\r\n                </Header>\r\n                <p>\r\n                  Instance is your port address so that we can initialise your\r\n                  Blockchain Wallet.\r\n                </p>\r\n                <div className=\"ui form\">\r\n                  <div className=\"field\">\r\n                    <input\r\n                      type=\"number\"\r\n                      onChange={this.instanceHandler}\r\n                      value={this.state.instance.slice(0, 1)}\r\n                    />\r\n                  </div>\r\n                  <div className=\"field\"></div>\r\n                  <div\r\n                    className=\"ui animated blue button\"\r\n                    onClick={this.instanceSubmitHandler}\r\n                  >\r\n                    <div className=\"visible content\">Submit</div>\r\n                    <div className=\"hidden content\">\r\n                      <i className=\"right arrow icon\"></i>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </Modal.Description>\r\n            </Modal.Content>\r\n          </Modal>\r\n        ) : (\r\n          <App port={this.state.instance} initialise={this.initialiseHandler} />\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default Login;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Login from './Components/Login';\n\nReactDOM.render(<Login />, document.getElementById('root'));\n\n"],"sourceRoot":""}